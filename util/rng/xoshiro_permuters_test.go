package rng

import "testing"

func TestXoroshiro64S(t *testing.T) {
	vectors := []struct {
		s  [2]uint32
		vs []uint32
	}{
		{[2]uint32{0xEA5469FE, 0x705AC12C}, []uint32{0x9B547A8A, 0x04459177, 0xC9196D7B, 0x534C0B3B, 0x786488C9, 0xB37C35ED, 0x736644EF, 0xA426CAB4, 0x0D3E9A22, 0x81FF1159, 0x910BAEF1, 0xECA45BB5, 0xA3BDE363, 0x848A571E, 0xA22EFF6D, 0x2D08F366}},
		{[2]uint32{0x1C2DF95B, 0xBC435DED}, []uint32{0x0CFE2879, 0x9AED3CA1, 0xEFE89011, 0x6F426BCB, 0xF9E0A446, 0xA48E4203, 0xC2CC8F95, 0x8F53C380, 0x9EBADA0D, 0x88C4EDE8, 0xF12C94EB, 0x2AC86207, 0x8C10BC21, 0x5362104E, 0x1E2E4493, 0xBAE499BB}},
		{[2]uint32{0x538E5F8B, 0x383D477B}, []uint32{0xA5057D89, 0xF68F80BA, 0x7F44BC8A, 0xCC704099, 0x24049095, 0xBEA3DBC6, 0x8FCBD194, 0xB12BCD52, 0x1E8AC3DE, 0xB92FD49C, 0x7BADE5E8, 0x985132E8, 0x50F04252, 0x64C5B75A, 0xF4E2924C, 0xE1FD88FF}},
		{[2]uint32{0xDBBD81C6, 0xDE07DD8D}, []uint32{0x2B4E61A2, 0xC1E3F784, 0x8E7EBF4E, 0x085454AA, 0x488BAA6E, 0xA90E9E38, 0xE58460DD, 0x506F9BD2, 0x10F07EA5, 0xF8335B12, 0x64021B9B, 0x6C3DD4F1, 0x8A9E805F, 0xD645B665, 0x0806C287, 0xDC7295F9}},
		{[2]uint32{0x50DFEEAA, 0x066159C0}, []uint32{0x1DE7B02E, 0x7AC45BF0, 0xAA6DC4BC, 0x6744CE2E, 0xD1977809, 0x40BC0107, 0xF8A4DF69, 0xA251577E, 0x02C1A122, 0x1FA63A03, 0xFAC08129, 0x8072E9CF, 0x0877DF62, 0x31CA696D, 0xABE58C6B, 0xF378AC20}},
		{[2]uint32{0x7A1CA355, 0x5783F35A}, []uint32{0x49617C17, 0xB6C0A4F6, 0xCEDE7671, 0x54374BA2, 0x3FA2DA66, 0xD502EA2D, 0x6FB74118, 0x58A8D1DB, 0x117DD98A, 0xCF26BA55, 0x51F67639, 0x89417F18, 0x1D7847BF, 0xB2A82B5C, 0x08DE1C37, 0x61AF185D}},
		{[2]uint32{0x6CBFCDF5, 0xAE408595}, []uint32{0x8E173EF7, 0xD7DF4B8D, 0x80A19697, 0x5B50668C, 0xA0BCCF4A, 0x80887270, 0x5C4F491F, 0x8DFA83A9, 0xBBABE7A6, 0x776D7DCF, 0xC9BC8399, 0x80492094, 0xA356B14D, 0x03CFB657, 0x131DE87B, 0xDA830C0E}},
		{[2]uint32{0x2B868F4C, 0xA6CA2B3F}, []uint32{0x16599884, 0x68ED5EFA, 0xDC67B1E2, 0x09477168, 0x1A7DBE87, 0x04D8C5B4, 0x83BD603A, 0xC83B7279, 0xABCDE786, 0xA7883C79, 0x6103886A, 0xC47D3822, 0x337D5304, 0x8F4CF94B, 0xD88B1A1D, 0xA9E4446B}},
		{[2]uint32{0x864D6CB6, 0xD81DFCAA}, []uint32{0x620A6EF2, 0x840F6C1A, 0xEF173726, 0xF953FCA5, 0x6B3C9ED8, 0x9DFD77BA, 0x113B099E, 0x48E87B5D, 0xEAF880A6, 0x54885C04, 0xFB111C43, 0xBD67A7B3, 0xC2CD537C, 0xE1A086AC, 0x36155F44, 0x8D352372}},
		{[2]uint32{0x7D456313, 0x6C35EDDE}, []uint32{0x509859E1, 0xB997A37B, 0x57CD966E, 0x21F8454D, 0xA7A74FE2, 0xFB4AA77E, 0x3ADD17DE, 0x6A60E09D, 0x7DEB1FB4, 0x0185292B, 0xE7D06747, 0x5E97D1A1, 0xFBBB84F6, 0x2D4EE982, 0x46A21C26, 0xBD8D253E}},
		{[2]uint32{0xAB6BF589, 0xF84A8EB6}, []uint32{0x8D591C13, 0x0771F933, 0x6A67A1C2, 0x81E14947, 0x70534D70, 0xC70DE13C, 0x73175C9A, 0xEE449837, 0x3A30780A, 0xECF40B1D, 0x24BE96E7, 0x36D51348, 0xBBC0553E, 0xA06DDBA7, 0xA9F146AC, 0x5B2AB7D1}},
		{[2]uint32{0x4EE1AC9D, 0x1560F468}, []uint32{0x452A4BAF, 0x8525BEDD, 0xCE26CD02, 0x9B9E6D01, 0xB0645F77, 0xC4C4C04C, 0xBB8A91BE, 0x8432824B, 0xBB16C998, 0x5C919E10, 0x3D60B38A, 0x9AC0FC41, 0x4A597FC8, 0x986B58FF, 0x314FAB2B, 0x968B8E5D}},
		{[2]uint32{0x0B015BE8, 0x498F9868}, []uint32{0x9D46CA78, 0x7AF84795, 0xF9557C87, 0x3E5C0483, 0x23F2AA5E, 0x3672B44E, 0x947EE64D, 0xF8716A2E, 0x599AF1D3, 0xC944B6A2, 0x21C565C4, 0xABA94EC0, 0x0FF992B4, 0x104B0152, 0x31E5352A, 0x94C2950D}},
		{[2]uint32{0x8885E746, 0x1D166816}, []uint32{0xE82A0622, 0xC3E262BF, 0xD80325F4, 0x81B0E812, 0x2917B9AB, 0xCF423837, 0x5C9FA961, 0x4FC2682F, 0x98912E1E, 0x0C072F0B, 0x1486ED60, 0x63F6518F, 0x18EFEE1E, 0xFB064C12, 0x1D62202A, 0x51019FEA}},
		{[2]uint32{0xA56804B8, 0x95D1B90C}, []uint32{0x90BE6A68, 0xEC286642, 0x5D03FE3D, 0x5F8B3BCE, 0x4CE29F2E, 0x7F3058C8, 0x484FFC23, 0x63E9790C, 0x6F4F6B5B, 0x4ACEF347, 0xCDD7C809, 0x7567F498, 0x147143DC, 0xB1F989FF, 0x2910A11C, 0xB57FE428}},
		{[2]uint32{0xE48AB931, 0x428561FC}, []uint32{0x8A646FCB, 0xD67A76F3, 0x66354B98, 0x1380E7B9, 0x0A6F93CE, 0xE2B3F970, 0x4C244469, 0xC439D347, 0x3AC5C806, 0x6FFE5E58, 0xF2D5480F, 0xA45F7A2A, 0x2B9571A8, 0x1EDDD1E8, 0xAABEB427, 0x52A3510E}},
	}

	for vecNo, vec := range vectors {
		state := vec.s[:]

		for i, expected := range vec.vs {
			got := xoroshiro64SPermuteState(state)
			if got == expected {
				continue
			}

			t.Errorf("At step %d of vector %d expected %d got %d", i, vecNo, expected, got)
		}
	}
}

func TestPermuteXoroshiro128PP(t *testing.T) {
	vectors := []struct {
		s  [2]uint64
		vs []uint64
	}{
		{[2]uint64{0x7EABC93DE333C567, 0x10F33A74D9654DC9}, []uint64{0x861142700994E4A5, 0xE8668E7579E79176, 0xCFEBD471E70E7BE0, 0xFB40DC0D6D2607D1, 0xAC5B71A1E64D484F, 0xFC9F75A91A32861F, 0xDBB5DB257647394F, 0x7882D889E723C1B8, 0x3F682F8E72E7C663, 0x7F69ABB5C191B189, 0x023BD61DAE99EB7E, 0x8A31249042A67378, 0xA0D4ED50C5B02303, 0x4C3804F0E428240B, 0xA8ACC0D95F072158, 0x5F1AD1B3773CB606}},
		{[2]uint64{0x99532BE8DDBE03D4, 0x88C2463A43D14873}, []uint64{0x7D996F07764C47FE, 0xBB1BEF8DCCD09D80, 0x099CDA370FF6D7CB, 0xDD18DE9BA32973CD, 0x3A635380148CD2B6, 0xB9DFF08AFD15A26C, 0x4B1E5799FB9BA145, 0x112B11D7F160FEF1, 0xA562B886629EA431, 0x0109C4C0DDF10067, 0x2D50D5232AD36390, 0xE16C6AEE86F2ACE0, 0xC11C1C3F0F379B43, 0xC07F716242011B6A, 0x136A19A63CE85A33, 0xF439887903C84E76}},
		{[2]uint64{0x96DA243077590BFA, 0x28D43C6ED533DC00}, []uint64{0x5818BD4A474E8B56, 0xEE8EFB064AE551F4, 0x681D9AA175D5F10C, 0x687339A430A6FDFA, 0xA1FE75CF09F3C241, 0x745E733D6C06A8F6, 0x079544B9B40E0E26, 0xF02F312EB75916F9, 0x9BE5E0E2664F2844, 0x52C666B013BA759E, 0xD65AE389BA3C82A6, 0x99A4752D54620E20, 0xE6AFC4D6C23C54B8, 0x2E9DB7652857BB98, 0x3C174D8B032AEC32, 0xF94C61BD36226DFA}},
		{[2]uint64{0xE5F7AF7EBE8F5CED, 0xFE1E54F5B4C9D038}, []uint64{0xEEE0963118DB2519, 0x9659B86AF122F9BA, 0xC228F0506745251F, 0x51802D4120E63615, 0x5AAC760E571CD6E6, 0xCA56FA34F91BB139, 0x86DA6D24E55A155C, 0xBB9E1C627E17AF01, 0x525A916ECD04CC03, 0xFC84104D976E1965, 0x4446FEF5EE3F3DBA, 0x8B9628749C2F40E6, 0x0134D76433E40CD0, 0x259FD1B282D37E00, 0x9FCF4B7F69587F3C, 0x61EE105730C8D173}},
		{[2]uint64{0xDEA22D057CE71674, 0x56A3C4CD017A3173}, []uint64{0xC24729C80CB580FF, 0x111A6718C2422A4C, 0xE5A489C3DF25802E, 0xD087A1C9E0EDD021, 0x5DE7BF7113B05721, 0x49A8DCA7A16BA867, 0xE90E27E9D2BA5639, 0x880760240B71BF46, 0x2C7FC06926B080EF, 0x5D2F541CD18CFF8C, 0xCFBB114DD7830521, 0x264A362FB58BE444, 0x4CC169304B2963CD, 0x7C735C2FDFF16037, 0xE53CCDFF84B1E73E, 0x31EB147E83FDA07F}},
		{[2]uint64{0x05AB7F197E1481DA, 0x528B02BAAC40A8A6}, []uint64{0x0953D3C3D3153247, 0xDEFDCF21BE45117B, 0x212E488509F52545, 0xF61712CB3BA7B87A, 0xE8D1D8D46186ABFD, 0xA2F50A08CF2854B9, 0x13BB9630E2B5B130, 0x7070DF056D9FD731, 0xD7C37BA13127BDE3, 0x4BDDB375C47D4FE5, 0xD89BA37CEA071803, 0xA1AE3361BFA6BCA1, 0xADA831AE633A3C02, 0x184DDB1AEEF720C7, 0xF0EACEF72650D4FB, 0x485EA485DAFBFAC3}},
		{[2]uint64{0x6EBEA448D0A8BBF5, 0x05B23C630E323F31}, []uint64{0x301661FEC6F5A4D6, 0x9642407DECBAD4A3, 0xB7B3CC4B50A38636, 0xE56DC39B69572526, 0x12B88A0C9E0ED7E4, 0xA7B9947BA782DEB0, 0x8E82A74C42542584, 0xD8C84687D57F4896, 0x1D8FFC95BD469F79, 0x5B9BE4CF21E5070A, 0x0FE2812DDB7DABCF, 0xB4DA89C5381C5F3D, 0x4C3011352DD02F53, 0x789E3ADE82854509, 0xC3B9F6D934AB3BCB, 0xC79C7D5C6E0117C3}},
		{[2]uint64{0x462FEAB4FF9A05B2, 0x58413A4FD6F0AB2B}, []uint64{0x903997CA61554294, 0x4424F405AC9CCBB9, 0x5F2C0160CA91EC24, 0x738FEC9F0B76ADD0, 0x1D7D5F4226F796E9, 0xA65E2A236E25CDB2, 0x36597CF96B04353A, 0xF68560C9C06000FF, 0x982C9668193C7CC1, 0x9323AB6AE893B3D8, 0x8748AE43A7D14A3B, 0xC15D32A795DB5723, 0x4B9DDF30DECE8A67, 0x268A3AD5B23FF978, 0xA7C4AF75F846953B, 0x745419A4C1E4D851}},
		{[2]uint64{0xFC9E20505ED824A7, 0xDF81983427F1443E}, []uint64{0x6DA72DE330A3DCE6, 0x5BDADE2BDC093A0C, 0x330D5C124BD7D45F, 0xC1DF84249B360DD1, 0xBBF9845270AAA32A, 0x8AE8015EB7A4B44E, 0x54D10D9367F35AE3, 0xF726B4AFC30F204F, 0xC4171E3C868B3E6F, 0xCD30186A7D8AD17D, 0x78001B3567B61E51, 0xE52C19A747B6CBDE, 0x9EBB2ADF4F72ED0F, 0x5D93D345F6086214, 0x413258A5F93FFB6C, 0xE89A165954414CAC}},
		{[2]uint64{0x94B1E6FFF2F28910, 0x831F6FB91BCA9564}, []uint64{0x4224047A2FDAB8B2, 0x3F2E5EAC6E93315D, 0x86CC6FFF71C15CAE, 0x4FE85251D487FFD7, 0x4A6CE8CE422B7D57, 0x99518A447C3DC756, 0xDE1A7AE942D9C057, 0xB80EAC137B6D6569, 0x424A4C490FF27769, 0x43FE2DC241436AE9, 0xC59205F2967034C5, 0x9C7B7548B4C9A561, 0x1409B167C24F85AB, 0x2AEF422AA4569054, 0x1CC8F73491002501, 0x3F058E495FDC33DD}},
		{[2]uint64{0x853E26C1EF02CE8E, 0x6110C14E3320B383}, []uint64{0x555E6B08F3269B2B, 0xABE286455302B01D, 0x975FCCAD37EEC848, 0x1A878D0C3E0F0820, 0x3718A542201C92CB, 0xD8C9DD1428F9C624, 0xB1686CDF97F3E57E, 0xD4C9562F8FF3C231, 0xB2D3DD1B9ECD9156, 0xCDCCD474FC7D3018, 0x083FA82C051DAB4D, 0xEC202E18E198C8A2, 0xC1232F62B78CDBB7, 0xA035A6FCC19AD83A, 0x578863FFAC331CCA, 0x7F3BD47C747340A5}},
		{[2]uint64{0x6CDFCA153C9C3D49, 0xC5558AECE054E4A3}, []uint64{0x16E403F78074A1B3, 0xE81B40D3FF6574B1, 0xCE582545150ABBE3, 0x291CF04B248FE8EF, 0xFB99C61E37AD8B75, 0xCC1429884F971366, 0x2B84C40AC3AA8560, 0xA5C569B19F79D59F, 0x2096E556956CB869, 0x1B96965DB17D3A27, 0xB422A65E0C2C9134, 0x393887C0CF64B6E3, 0x5B355A1E1B23D22C, 0x691F7733D9C213A0, 0x26C5209C7A274D79, 0x2E9E3BA12ECD536B}},
		{[2]uint64{0x506AB790C023FAD3, 0xB0A78117B64AF264}, []uint64{0xC1BBA46E9A91FCF7, 0x9D8276DDC85902C7, 0x5072F35AB7530B16, 0x4240E278C17CEDE4, 0x5738DB4C209D3DFB, 0xA8D3FC268EE2B43B, 0x69EC28546521C29E, 0xBCDC366A15992BE2, 0xF8B27C88878854D9, 0xA23C6E79630B6BCB, 0x0A54F8EF78AB52E2, 0x52202CD80B17B5CF, 0x8D879BA989D41DCD, 0x4C2FCE3E78394603, 0x6F55E833D9F46C11, 0x584DEBD0BD7A0183}},
		{[2]uint64{0x3654E83779F262AA, 0xC813A6AA820A932C}, []uint64{0x5418E03165A05F7B, 0xC131739F09ED9339, 0xEEB23B131A1B79EE, 0x19CD9E6B20980DB8, 0xF4FA01C22A623CEA, 0x067EEA0F4139606F, 0x30062A403EB99B1B, 0xBED6E80177577BB4, 0x71C602DBF00F916D, 0x7571B424657CDBAF, 0x055F2390B20C0B78, 0xAD14CFEC5AA362F1, 0x6823DD7A90F92E2C, 0x6151E9EDB054B760, 0x5D48A360671ADF6B, 0x4498CD724EDEE529}},
		{[2]uint64{0x0D01934BEDD8A44B, 0xD4A368851D90E07B}, []uint64{0x04A3AA1EF7666794, 0xC2FBA5B8EF5B4F5F, 0x89F8CDC17C032D76, 0x6A4F0988A6A0116F, 0xFF93C06BFC48CE3F, 0xBF08529D60F4B214, 0xD4BB3FA59A464630, 0xFC679ECF731F1485, 0xC58DA7A9C2362352, 0xE0319E50EF8B0DC2, 0x2E293B9A66C044D2, 0xB51C1AAB4C8893F0, 0xB879DBE7A907C217, 0xF3831F6465791CFD, 0xDEC50D66C248677B, 0xE36C3A4308BF34EB}},
		{[2]uint64{0xCA718D1AEA7DC58E, 0xF6D7C10E1E8821E8}, []uint64{0x66C39F26B96B4820, 0x7E48D1E08CBD3986, 0xFB95E8136A966675, 0x5365680C83739B2E, 0x399D8203DB32F315, 0x43F77B018F969B8A, 0x40544587749C25D6, 0x4D62FCE03CE43A85, 0x82274DB10CCE6265, 0xF7CDA5C459E3D3B9, 0x04885E260BF690D4, 0x0B57339DFE666BF6, 0x40CD8A071FF17CA5, 0xCF2D1171154C9D96, 0x22813086B459AF53, 0xF69634C36DD4F9C8}},
	}

	for vecNo, vec := range vectors {
		state := vec.s[:]

		for i, expected := range vec.vs {
			got := xoroshiro128PPPermuteState(state)
			if got == expected {
				continue
			}

			t.Errorf("At step %d of vector %d expected %X got %X", i, vecNo, expected, got)
		}
	}
}

func TestPermuteXoshiro256PP(t *testing.T) {
	vectors := []struct {
		s  [4]uint64
		vs []uint64
	}{
		{[4]uint64{0x46A2399E3C169544, 0x8FF6DC0B9795017B, 0xE80291DA5D126190, 0x138EBAE4A31FE0C9}, []uint64{0x8811D4D942C3ADBE, 0x5AE51C9ECC37FD4F, 0xD6B65CF57B6578EC, 0x6562469D82322C60, 0x3C089667645D077E, 0x0A9CD640D66A5403, 0xB6AADAF751FDED39, 0x34526660DBE9EF4E, 0xB71AEB228B1793BE, 0x46336BD486FF1A86, 0x73B6397BC3E678CD, 0x8077FF2E72C42F66, 0xD8589FEAD21C5A37, 0x0C83C2DA84E807A7, 0x8BE68D69D22E2CA5, 0x93E31005CACF8713}},
		{[4]uint64{0xBD9230BB9C488F18, 0x89198C0F9203C2ED, 0xB29DC157A2FE8137, 0x31F88B84B89E4BDD}, []uint64{0xDDBCA42917405476, 0x2BDF1A6674B052CF, 0x8CE7569FDB756A7B, 0x504BE349D60F7236, 0x6D340113FAA1BAB6, 0xA8987B2C95458FE6, 0x8D3E6EAF924C2B41, 0x0380DA41DC4CEC06, 0x2360E1115D1EF266, 0x8EBA83491A1F426B, 0x5C8A3E8B69813347, 0x3DC693E52748DA67, 0x6D3D096D27553DFF, 0xFAEFCFEDD77381FE, 0xF3C7E988FE94C6A4, 0x2E238083DD01F9C1}},
		{[4]uint64{0xFEF39259C917A78C, 0xF02B765603E3715D, 0x593676E64CDD2394, 0x993592B869E98B57}, []uint64{0x880D12F33AE3BC1E, 0x85AD544D0718F4E7, 0xE93D7AD665BC8717, 0x01709C7BE3340EF7, 0x6E530A14E20E985F, 0x3584E6C6689D4479, 0x3B34F25F8D0980EF, 0x2A90615FBB5370BB, 0xF5208A84AB88F36A, 0x91156CE02C8B48C6, 0xCF375877849856C5, 0xDE9E9C2B52821D1C, 0xCFCCBC6043E088C3, 0x24867B1E324D4B50, 0x47184785D25AAAD6, 0x0D04729320A4EA38}},
		{[4]uint64{0x646E4D8789FA06EC, 0x89A1919DB8F67B23, 0x3632E8A5274215D8, 0xBD5DE4991B895BF9}, []uint64{0x74C10F38FC8AED05, 0xE1EECB607D1F7CF5, 0xBFB4A29A68135BF7, 0x79FD93E1E254EE93, 0xD0F71F203EF6C7B2, 0xEA5E0CF566EA533F, 0x6E7399F3EE2523FF, 0x2FF15E998497E84C, 0x61527FEED9B69D67, 0xD9D81664DEBCCC98, 0x40B1A7C527C4043F, 0x496473B41F72A075, 0xED497CFAF40AABA6, 0x212C4B35ACEC2538, 0xB44A90F0E901B71C, 0xB4394468636E33E1}},
		{[4]uint64{0xCA3E4FB7A70A3E4C, 0x947306BB4D2A9A57, 0x74A1848E7DE7BC2F, 0xA05ABBF5BD4C7364}, []uint64{0xA0F07B107F3F8AD1, 0xBD5F7E541D5A76AB, 0x86038B81A1736383, 0x3BA57D4C76713ED2, 0x965202DF8D535A9D, 0x82D7224B64CFB4F2, 0xD12CB739F7ED131F, 0x77CF05D553AFDD5B, 0xEA2EC992390F7F3D, 0x28ED0D50AA02BECA, 0xA0BD3A11018E6F26, 0x7AE8E62CEC71FEC4, 0xE86904E060FA5396, 0xAE2F71EDB7A1A269, 0xE7E4DC6A908FDFF0, 0xE7A323031E7FEEAC}},
		{[4]uint64{0x89A4AE9C99CD6D7E, 0xDDCC87DF2B1B331F, 0xCBD49C15B380A301, 0xAB1A6F9B07A6D157}, []uint64{0xA57568BC0467CD0D, 0xD93B83631C4E6CE0, 0xC6184D9E0F84CB31, 0x6E13C87849EC9758, 0xE5E97556DB4364CD, 0x18ED8DA186638658, 0xBE33FD16684837D8, 0x94AAD7E47FA42B8C, 0xC3036877FFB954B2, 0x6A0471FE4A2AD848, 0xF1800257C1874174, 0x368AEBF22E8DE5E2, 0x003766CBF3A78C36, 0xA2DE6B4CC0F26932, 0x7CA0D146B9771E19, 0xE79E1E202D40BEAB}},
		{[4]uint64{0x1D66E1C4CE09DDFE, 0x830A8AC932160772, 0xEFF405596FCCB5C4, 0x436FE339D9AE8C20}, []uint64{0x9CBABDF9DD3A4960, 0xFD6CFFEE37A88D9C, 0x0322D20253924168, 0x07984BD28585E968, 0xA5783B4C549DEC3B, 0x02854625EF7B21CA, 0x9BF157C33963E2F5, 0x70076FAF0E3DF9A6, 0x5B1922CFA65CAFC8, 0xC37D4E6C6132B88C, 0x094515E0C05ED4D8, 0x1786536A01912A49, 0x5BFCC34C838342E6, 0xCDD7304F991776B0, 0xFCD54E6C96F30800, 0x8A5C4C4F365ABABB}},
		{[4]uint64{0x2F06A18E954A0250, 0xFADCD64FF5473CBB, 0x72AB976DF44739CD, 0x1268888A39799B03}, []uint64{0x3B6E035D3EEAB9E5, 0xF8A5A5FB1142FAF6, 0x654751A0E46C1F61, 0x5A16D90CEF7B74FB, 0x12FEE3AAAFBF1C80, 0x7C129B1518A6B6A7, 0x1AAA8A6B451725BA, 0x7BA190E6A78EBB9C, 0x4CBC1955A6D51CC3, 0xE37EB2753BB78821, 0x8E991F5FECF02AED, 0x789BE1F155C209FB, 0xBC8F95453E2FF5B6, 0x9A157C686BAFF448, 0xFBE272D8D15AE6F8, 0xE8443F18EB6628EB}},
		{[4]uint64{0x706B41D023783373, 0x282B24702383714F, 0x181CE58DCEA07464, 0xC290A43E2AA45A1B}, []uint64{0x77925016EA91B166, 0x159DF60AD01F35D6, 0x0592BB8826DD5A93, 0x3FB4BFF648024598, 0xEC07344D02E32393, 0xBFCE2830734C6ADD, 0x1528FCF09A1C3E39, 0xD3D3E6E00BABF41B, 0xAA56F69403FD8845, 0x8379ECB38400289D, 0x6FC4ECD505B1162A, 0x45C2C98820D3969D, 0xDE99EFC61D8790ED, 0x74A459B432EBF467, 0xB0F06559BE3A4887, 0x6CBE58B19F3BBC80}},
		{[4]uint64{0x16947AF650F78391, 0x2776B5756D7C3EF3, 0x1EBC38135098BA16, 0x4A91C7A28AAF4085}, []uint64{0x63024E585C2816B2, 0x6AC5C81F281A9ED1, 0x4B810B589DAAB0E6, 0xA632E4C82E64CBB3, 0x60468783486697D0, 0x9D9D4D394E67DD8B, 0x73806D084C1A9505, 0x0490978A23E6AC72, 0x0FD3DCC2F4728D3B, 0x120C19721FE360D5, 0x20588018F31D93C2, 0xFB22E46EB2D3057D, 0x9880578258044446, 0xFB2ED469591512DC, 0x408E11B7D27A9F65, 0x8F4035BB66F9573C}},
		{[4]uint64{0x4B0175931BBC6A6F, 0x77B2BB710059EE57, 0x7D126AD645E13C66, 0x560F5421D1CD2090}, []uint64{0x25783A589B8CF2D3, 0xE880A423372AEF67, 0x9A6EBE01CA89907E, 0x6E8B8E4A28134AA2, 0x1215D97EAE463997, 0x5BD00E3868226EFE, 0x9B7B734108F57984, 0x2DA1BC58B9823728, 0xA68A52617D65BB90, 0xC7443A91445874E4, 0x548B1C618F8A94F8, 0x6A3CB22F309A51D0, 0xD2AB97FFEF4C295C, 0xE302C11BC119A596, 0xF29382F1171CC03A, 0xAFD4099A249F55EE}},
		{[4]uint64{0xF76C8BAB98713977, 0xB015077C5E180024, 0xD3BD43408CDA00BF, 0xA58438D05629C164}, []uint64{0x3563D929063FB1D9, 0x3FD9CF442ECE8B12, 0xAE5CCE9A3F98D844, 0x70472A64D8D9FF30, 0xA2785F4109060B56, 0xB2D57B26E1BEE905, 0x0AB9CD19284AD5E3, 0x1A812B0C72DCBC4F, 0xEF2405DD8ED950B5, 0x1A1E91E172977398, 0xCDCD62B93D8AD50F, 0x16D01B3595EB1CB0, 0x2190BC2674C23539, 0x012CC1B5FACB5BFC, 0x0BEB4BB602BE0984, 0x5680E900A9DAB063}},
		{[4]uint64{0x7DF7862627C56EE2, 0xEF3925ABB7F3D377, 0x9E9624C6CC788670, 0x6E08C820CED61527}, []uint64{0xA172D3E82CBB6F09, 0xE694B4B94A3B70EF, 0xF19E03949839730C, 0xF6F76A7AB799DDA9, 0x2175113B7A29D3C1, 0xFB25F007494FEA34, 0x009EAF08F319B960, 0x3DC576570A33398F, 0x34C07CEDB0EC9923, 0x705FCB454DA65456, 0x4D657F121C416B6E, 0xAAC988F4E2FDE348, 0xC670846D83AF1669, 0xE54FD8D5AEDF1C41, 0x6CD75FAE1EA090BE, 0x7581AD1A790A96B2}},
		{[4]uint64{0xE128B1EB6E7348B1, 0x0DC1D30BB9439BED, 0x96AFDC68EB52ED95, 0x613DC73D29F63C48}, []uint64{0x7574E6ADEB147BED, 0x4C954CBE93E853BD, 0x93A7F94814128523, 0x595833810CF432EF, 0xAE1E4ABA083165D0, 0x1D2D489BABB71477, 0xB7AE572A9B7724BC, 0x0500EFB451AF6B4B, 0x0B4341BD3ADB84F2, 0x7A78A703DFCB3AE4, 0x4F03DD828113472A, 0xF3980CCD59FCC814, 0xDEDD4E0DEF545CAB, 0xA05F6DBA849D033C, 0x02943AAE83F0FA01, 0xC4D0D33D7D063123}},
		{[4]uint64{0x1C9DA475C7297188, 0xC734223A23192A84, 0x3EA6907253B7CA71, 0x43D6B94C81739299}, []uint64{0xFDC1F2F7D7D9ABB6, 0x685B985256BB8B0C, 0x1C7ED90722D4197C, 0xC782BFBA13274156, 0xB620C94E13C77EDD, 0x5C776B39E80E801B, 0x47BF68CBE42FA615, 0x1235E27DAE3562A1, 0xFAAA16450F248CBC, 0x4AA85DAC0B6F6940, 0x12E85D67CBB46A0F, 0x561C7C9B5C603440, 0x3233EAC9A85BC10D, 0x5D7A3CA7D394B631, 0xD57A88EE46FD2DFE, 0x32668B817381D465}},
		{[4]uint64{0xD77BB2E278333358, 0xD25AFBAB729D298D, 0x68867191D85E4584, 0xD72EE4330A5D2392}, []uint64{0x623CFB0DED8A88A3, 0xE652209E30DCE30E, 0x1361F4A5E904E35F, 0xB2819851854A5383, 0xEB8FFD7EE69FA4AC, 0x73F4A9B0477815F4, 0x982139F3529789C3, 0xED781FD9F4DBA9FC, 0x86EE300711674EC7, 0x8FD2FA6084F79486, 0x0294F2ACEFE2FAC9, 0x1E1331D7EE807C8F, 0x1A922999F51A72FC, 0xA1386D8FCFF17D2D, 0xDDB653E986CB7BE0, 0xE6CBC25DACF41E07}},
	}

	for vecNo, vec := range vectors {
		state := vec.s[:]

		for i, expected := range vec.vs {
			got := xoshiro256PPPermuteState(state)
			if got == expected {
				continue
			}

			t.Errorf("At step %d of vector %d expected %X got %X", i, vecNo, expected, got)
		}
	}
}
